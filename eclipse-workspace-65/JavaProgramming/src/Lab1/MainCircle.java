package Lab1;

public class MainCircle {
	public static void main(String[] args) {

		Circle c1 = new Circle();
		Circle c2 = new Circle(2.5);
		Circle c3 = new Circle(5.0);

		System.out.println("Circle1");
		c1.display();
		System.out.println("\nCircle2");
		c2.display();
		System.out.println("\nCircle3");
		c3.display();

	}

}

/*
 * 1. การเขียนคําสั่ง Circle c1; เป็นการสร้างวัตถุแล้วหรือยัง เพราะอะไร
 * การเขียนคำสั่ง Circle c1; ยังไม่ได้สร้างวัตถุจริง ๆ แต่เป็นการประกาศตัวแปร c1
 * ของคลาส Circle ซึ่งมีประเภทเป็น reference variable
 * ซึ่งจะใช้ในการอ้างอิงวัตถุจริง ๆ ของคลาส Circle
 * ที่จะถูกสร้างขึ้นมาในภายหลังด้วยคำสั่ง new Circle() หรือตามที่กำหนดไว้ใน
 * constructor ของคลาส
 * Circle ที่ถูกเรียกใช้
 * ดังนั้นจึงยังไม่สามารถเรียกใช้เมธอดหรือตัวแปรภายในวัตถุได้
 * จนกว่าจะมีการสร้างวัตถุจริง ๆ ขึ้นมาด้วย new Circle()
 */

/*
 * 2. จากคําสั่งข้อ 1 c1 เก็บค่าของอะไร
 * คำสั่ง c1 ไม่ได้เก็บค่าของอะไร แต่เป็นการประกาศตัวแปรชนิด Circle ชื่อ c1
 * ซึ่งสามารถใช้ตัวแปร c1 เพื่ออ้างอิงถึงวัตถุชนิด Circle
 * ที่ถูกสร้างขึ้นในภายหลัง
 * โดยใช้ constructor หรือเมธอดที่เหมาะสมสำหรับสร้างวัตถุนั้น ๆ
 */

/*
 * 3. ในคลาส Circle จะมี main( ) ได้หรือไม่ เพราะอะไร
 * คลาส Circle สามารถมี main() ได้ แต่ถ้าไม่มี main()
 * ก็จะไม่สามารถเป็นจุดเริ่มต้นของการรันโปรแกรมได้ แต่สามารถนำคลาส Circle
 * มาใช้งานในคลาสอื่น ๆ ได้
 * โดยจะต้องสร้างอ็อบเจกต์ของคลาส Circle ขึ้นมาก่อนใช้งานเมธอดและตัวแปรของคลาส
 * Circle ในคลาสอื่น ๆ
 */

/*
 * 4. Constructor มีหน้าที่อะไรในโปรแกรม
 * Constructor
 * เป็นเมธอดพิเศษที่มีชื่อเดียวกับคลาสและมีหน้าที่ในการกำหนดค่าเริ่มต้น (initial
 * values) ให้กับตัวแปรสมาชิก (member variables)
 * ของวัตถุ (object) ที่จะถูกสร้างขึ้น โดย Constructor
 * จะถูกเรียกใช้งานอัตโนมัติเมื่อสร้างวัตถุขึ้นใหม่ ดังนั้น Constructor
 * เป็นส่วนสำคัญของการเขียนโปรแกรมเชิงวัตถุ
 * เพราะช่วยให้การกำหนดค่าเริ่มต้นของวัตถุเป็นไปอย่างถูกต้องและง่ายต่อการบำรุงรักษา
 * นอกจากนี้ Constructor
 * ยังสามารถใช้เพื่อกำหนดค่าเริ่มต้นของตัวแปรที่ถูกส่งเข้ามาใน Constructor
 * ได้ด้วย
 */

/*
 * 5. เราสามารถใช้ Constructor เดิมซํ้าได้หรือไม่ จะเกิดอะไรขึ้นถ้าใช้ซํ้า
 * ในการสร้าง constructor ใน Java ถ้าเราไม่ได้กำหนดชื่อ constructor นั้นเอง
 * ระบบจะสร้าง constructor แบบ No-arg constructor โดยอัตโนมัติ
 * 
 * หากเรากำหนด constructor แบบซ้ำกัน (overloading)
 * ซึ่งมีชื่อและประเภทพารามิเตอร์เหมือนกัน โปรแกรมจะไม่สามารถรู้ว่าต้องใช้
 * constructor แบบไหน เมื่อเราสร้างวัตถุของคลาสนั้น
 * และจะเกิดข้อผิดพลาดในการคอมไพล์ (compile-time error) ถ้าเราสร้างวัตถุด้วย
 * constructor แบบที่ไม่ตรงกับพารามิเตอร์ที่ระบุ หรือไม่มี constructor
 * ที่ตรงกับพารามิเตอร์ที่ระบุเลย
 * 
 * ดังนั้น ในกรณีที่เราต้องการสร้าง constructor แบบซ้ำกัน จึงต้องเปลี่ยนชื่อ
 * constructor หรือประเภทของพารามิเตอร์ เพื่อไม่ให้เกิดข้อผิดพลาดในการคอมไพล์
 */

/*
 * 6. ถ้าต้องการเปลี่ยนแปลงค่าคุณสมบัติของวัตถุ (Properties) ที่สร้างขึ้นมาแล้ว
 * ต้องใช้ Constructor อีกหรือไม่ ถ้าใช่ ทําอย่างไร ถ้าไม่ใช่ ต้องใช้วิธีใด
 * ไม่จำเป็นต้องใช้ Constructor
 * เพื่อเปลี่ยนแปลงค่าคุณสมบัติของวัตถุที่สร้างขึ้นมาแล้ว ใน Java มีเมธอด Setter
 * เพื่อเปลี่ยนแปลงค่าของ Properties ของวัตถุ ดังนั้น สามารถใช้
 * Setter เพื่อเปลี่ยนแปลงค่า Properties ของวัตถุได้
 * โดยไม่ต้องสร้างวัตถุใหม่ด้วย Constructor
 * ซึ่งจะช่วยให้เราประหยัดหน่วยความจำและเวลาในการเขียนโปรแกรมได้
 */
