package Lab3;

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		// 2. จงเขียนคลาสทดสอบการทํางานของคลาส Point โดยสร้างจุดขึ้นมา 3 จุด และแสดงระยะทางระหว่างจุดแต่ละคู่
	    //Point point1 = new Point(0, 0);
	    //Point point2 = new Point(5, 3);
	    //Point point3 = new Point(8, 3);
	    
	    //System.out.println("Distance between p1 and p2 : " + point1.distance(point1, point2));
	    //System.out.println("Distance between p1 and p3 : " + point1.distance(point1, point3));
	    //System.out.println("Distance between p2 and p3 : " + point2.distance(point2, point3));
		
		
		//3. คัดลอกจุดใดก็ได้ในข้อ 2. ด้วยเมธอด copy( ) แล้วย้ายจุดที่คัดลอกมาไปที่พิกัด (x+5, y+6) โดย x และ y เป็นพิกัดของจุดเดิม แล้วแสดงระยะทางระหว่างจุดเดิมกับจุดใหม่
		Point point1 = new Point(3, 4);
		
		Point point2 = point1.copy(point1);
		point2.movePoint(point2.x + 5, point2.y + 6);
		
		double distance = point1.distance(point1, point2);
		System.out.println("Distance : " + distance);
	}

}


/* 1.Overloading method ของ distance() ต่างกันอย่างไร
 *   Overloading method คือการสร้างเมธอดที่มีชื่อเหมือนกัน แต่รับพารามิเตอร์แตกต่างกัน โดยที่ประเภทของพารามิเตอร์หรือจำนวนของพารามิเตอร์อาจแตกต่างกันได้

 *   ในกรณีของ method distance() ที่ถูก overloading จะมี signature ที่แตกต่างกันตามจำนวนและประเภทของพารามิเตอร์ ตัวอย่างเช่น:

 *   - distance(Point p1, Point p2) : รับพารามิเตอร์เป็นอ็อบเจกต์ Point 2 ตัว และคืนค่าเป็น double ที่แสดงระยะห่างระหว่างจุดสองตัวนี้
 *   - distance(int x1, int y1, int x2, int y2) : รับพารามิเตอร์เป็นค่าพิกัด x และ y ของจุด 2 ตัว และคืนค่าเป็น double ที่แสดงระยะห่างระหว่างจุดสองตัวนี้

 *   ดังนั้น เมื่อเรียกใช้ method distance() โดยกำหนดพารามิเตอร์ต่างกัน เช่น distance(p1, p2) และ distance(x1, y1, x2, y2) จะเรียกใช้ method ที่ถูก 
 *   overloading แตกต่างกันในการรับพารามิเตอร์และคืนค่าในที่สุด
 *   */

/* 2.จงอธิบายความแตกต่างของการส่งผ่านวัตถุไปยังเมธอดโดยใช้พารามิเตอร์ของวัตถุและโดยใช้ข้อมูลชนิดวัตถุ
 *   การส่งผ่านวัตถุ (passing an object) ไปยังเมธอดของคลาสอื่น ๆ สามารถทำได้โดยการใช้พารามิเตอร์ของวัตถุเป็นตัวแปรในเมธอดนั้น ๆ ดังนั้น 
 *   เมื่อเรียกใช้เมธอดนั้น ๆ ด้วยวัตถุเป็นอาร์กิวเมนต์ ค่าของวัตถุจะถูกส่งไปยังเมธอดนั้น ๆ ผ่านพารามิเตอร์ของวัตถุ และการเปลี่ยนแปลงที่ทำกับวัตถุในเมธอดนั้น ๆ จะส่งผลต่อวัตถุตัวนั้นๆที่ถูกส่งเข้ามา
 *   
 *   ในทางตรงกันข้ามกับการส่งผ่านวัตถุ คือการส่งผ่านข้อมูลชนิดวัตถุ (passing object data) ซึ่งหมายความว่า การส่งผ่านข้อมูลในรูปแบบนี้ จะส่งค่าของข้อมูลตัวแปร ไม่ใช่ตัวออบเจ็กต์ 
 *   และการเปลี่ยนแปลงที่ทำกับข้อมูลในเมธอดนั้น ๆ จะไม่มีผลต่อตัวแปรตั้งต้นที่ถูกส่งเข้ามา และตัวแปรตั้งต้นนั้นจะไม่เปลี่ยนแปลงด้วยเช่นกัน โดยในกรณีนี้ ข้อมูลในตัวแปรที่ถูกส่งผ่านจะถูกคัดลอกไปยังตัวแปรอื่น 
 *   และการเปลี่ยนแปลงที่ทำกับข้อมูลในเมธอดนั้น ๆ จะไม่มีผลต่อตัวแปรตั้งต้นที่ถูกส่งเข้ามา
 *   */

