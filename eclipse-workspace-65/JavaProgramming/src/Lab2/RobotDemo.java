package Lab2;

public class RobotDemo {
	public static void main(String[] args) {
		Robot robot1 = new Robot(705, "Nexus");
		Robot robot2 = new Robot(434, "Cygnus");
		Robot robot3 = new Robot(383, "Helix");
		
		System.out.println("Robot 1: ID=" + robot1.getID() + ", Name= " + robot1.getName() + ", Version= " + robot1.getVersion());
		System.out.println("Robot1 go forward: " + robot1.goForwardN(5) + " time");
		System.out.println("\nRobot 2: ID=" + robot2.getID() + ", Name=" + robot2.getName() + ", Version=" + robot2.getVersion());
		System.out.println("Robot2 go left: " + robot2.goLeftN(10) + " time " + "and go backward: " + robot2.goBackwardN(3));
		System.out.println("\nRobot 3: ID=" + robot3.getID() + ", Name=" + robot3.getName() + ", Version=" + robot3.getVersion());
		System.out.println("Robot3 go right: " + robot3.goRightN(8));
		System.out.println("\nNumber Of Robot: " + Robot.numberOfRobot);
		
		int x = 0, y = 0;
		x = clear();
		y = clear();
		System.out.println("position of " + robot1.getName() + "is at (" + x + ","+ y + ")");
		
	}
	
	public static int clear() {
		return 0;
	}
}

/* 1. จงอธิบายการใช้งานมอดิไฟเออร์ private
 *    Motifier private ในภาษา Java เป็นการประกาศตัวแปรหรือเมธอดในคลาสที่เป็น private ดังนั้นจะไม่สามารถเข้าถึงได้จากภายนอกคลาส 
 *    หรือจากคลาสอื่น ๆ ในโปรแกรม แต่สามารถเข้าถึงได้จากภายในคลาสเดียวกันได้
    
 *    การใช้งาน Motifier private สามารถช่วยให้การเขียนโปรแกรมเป็นไปได้ด้วยความปลอดภัยมากขึ้น เนื่องจากไม่มีการเข้าถึงตัวแปรหรือเมธอดจากภายนอกคลาสที่อาจจะเป็นอันตราย 
 *    หรือมีความส่งผลต่อการทำงานของโปรแกรมในที่สุด
    
 *    นอกจากนี้ การใช้งานมอดิไฟเออร์ private ยังช่วยให้การเปลี่ยนแปลงโครงสร้างของคลาสนั้น ๆ เป็นไปอย่างปลอดภัย โดยไม่มีผลกระทบกับโปรแกรมภายนอกที่ใช้งานคลาสนั้น ๆ ด้วย
 * */

/* 2. จากคําสั่ง private int x; ถ้าต้องการใช้ตัวแปร x จากคลาสอื่น จะทําได้หรือไม่ เพราะอะไร
 *    ไม่สามารถเข้าถึงตัวแปร x จากคลาสอื่นได้เนื่องจากเป็นการป้องกันการเข้าถึงข้อมูลโดยตรงจากคลาสอื่น การประกาศ private จะทำให้ตัวแปรหรือเมทอดนั้นๆ 
 *    เป็นส่วนตัวของคลาสและสามารถเข้าถึงได้เฉพาะภายในคลาสเท่านั้น ถ้าต้องการเข้าถึงตัวแปร x จากคลาสอื่นจะต้องใช้เมทอดหรือตัวแปรที่มีการเข้าถึง public 
 *    ซึ่งเป็นการกำหนดให้ภายนอกสามารถเข้าถึงได้ในขอบเขตที่กำหนดไว้ ดังนั้นการเข้าถึงตัวแปร x จากคลาสอื่นจึงไม่สามารถทำได้โดยตรง
 * */
 
/* 3. ตัวแปรชนิด static คืออะไรแตกต่างกับตัวแปรที่ไม่เป็น static อย่างไร
 *    ตัวแปรที่ถูกประกาศว่าเป็น static จะถูกสร้างขึ้นในพื้นที่หน่วยความจำชั้น static ซึ่งถูกแชร์กันระหว่างทุก instance ของคลาสเดียวกัน 
 *    ดังนั้นเมื่อมีการเปลี่ยนแปลงค่าของตัวแปรชนิด static จาก instance ใด ๆ ก็จะมีผลต่อทุก instance ของคลาสนั้น ๆ ด้วย

 *    อย่างไรก็ตาม ตัวแปรที่ไม่ได้ประกาศว่าเป็น static จะถูกสร้างขึ้นในหน่วยความจำสำหรับ instance แต่ละตัว ดังนั้นค่าของตัวแปรแต่ละตัวจะไม่มีผลต่อตัวแปรใน instance อื่น ๆ ของคลาสเดียวกัน

 *    ดังนั้น การประกาศตัวแปรเป็น static สามารถใช้ได้ในกรณีที่ต้องการแชร์ค่าเดียวกันระหว่าง instance หรือต้องการเรียกใช้ตัวแปรหรือเมธอดโดยไม่ต้องสร้าง instance ของคลาสก่อน 
 *    ในขณะที่ตัวแปรที่ไม่ได้ประกาศว่าเป็น static ใช้สำหรับสร้างค่าสำหรับ instance แต่ละตัวในคลาสนั้น ๆ
 * */
 
/* 4. เมธอดชนิด static แตกต่างกับเมธอดที่ไม่เป็น static อย่างไร
 *    Method (method) ที่ประกาศว่าเป็น static จะถูกเรียกใช้ได้โดยตรงจากคลาส (class) โดยไม่ต้องสร้างอินสแตนซ์ (instance) ของคลาสนั้น ๆ ก่อน 
 *    ในขณะที่ Method ที่ไม่ได้ประกาศว่าเป็น static จะต้องถูกเรียกใช้ผ่าน instance ของ class นั้น ๆ

 *    เมื่อเรียกใช้ Method static ไม่จำเป็นต้องสร้าง instance ดังนั้นไม่สามารถเข้าถึง variable non-static ใน class นั้น ๆ ได้โดยตรง ในขณะเดียวกัน 
 *    Method ที่ไม่ได้ประกาศว่าเป็น static สามารถเข้าถึง variable non-static และ variable static ใน class นั้น ๆ ได้ 
 *    โดยต้องผ่าน instance ของ class นั้น ๆ ที่มีการสร้างขึ้นมาก่อน

 *    นอกจากนี้ Method static สามารถเรียกใช้งานได้ทันทีโดยไม่ต้องมีการสร้าง instance และ method นี้ไม่สามารถเข้าถึง variable non-static ภายใน class นั้น ๆ ได้ 
 *    ซึ่งจะเป็นประโยชน์ในกรณีที่ต้องการสร้าง method ที่สามารถเรียกใช้ได้ตลอดเวลาโดยไม่จำเป็นต้องสร้าง instance หรือต้องการเข้าถึงข้อมูลที่เป็น static ภายใน class นั้น ๆ โดยตรง
 * */

/* 5. Get method และ Set method มีหน้าที่อะไร
 *    Get method และ Set method เป็นเมธอดสองอย่างที่ใช้กันอย่างแพร่หลายในการเขียนโปรแกรม Java เพื่อเข้าถึงและแก้ไขค่าของตัวแปรที่ถูกประกาศเป็น private ในคลาสอื่น ๆ
 */

/* 6. การออกแบบให้โปรแกรมมีตัวแปรทุกตัวเป็น private แล้วใช้ get-set method ในการเข้าถึงค่าของตัวแปรเหล่านั้น ถือว่าเป็นการเขียนโปรแกรมที่ดีหรือไม่ เพราะอะไร
 *    การออกแบบให้โปรแกรมมีตัวแปรทุกตัวเป็น private และใช้ get-set method เพื่อเข้าถึงค่าของตัวแปรเหล่านั้นถือว่าเป็นการเขียนโปรแกรมที่ดี เนื่องจากมีข้อดีต่อการจัดการและแก้ไขโปรแกรมดังนี้

 *    1. Encapsulation: การที่มีตัวแปรทุกตัวเป็น private จะทำให้ไม่สามารถเข้าถึงค่าของตัวแปรเหล่านั้นโดยตรงได้จากภายนอกคลาส ทำให้คลาสมีความปลอดภัยมากขึ้นเพราะไม่มีการเปิดเผยค่าของตัวแปร
 *    จากภายนอกคลาส

 *    2. Data Integrity: การใช้ get-set method จะช่วยให้มั่นใจได้ว่าข้อมูลที่ถูกเก็บในตัวแปรมีความถูกต้อง เนื่องจากมีการตรวจสอบและกำหนดเงื่อนไขการเข้าถึงข้อมูลในเมทอด set และ 
 *    get method

 *    3. Flexibility: การใช้ get-set method ช่วยให้สามารถเปลี่ยนแปลงลักษณะการเข้าถึงข้อมูลในภายหลังได้ โดยไม่ต้องเปลี่ยนแปลงโค้ดภายในคลาส ซึ่งช่วยลดความซับซ้อนและช่วยให้ง่ายต่อ
 *    การบำรุงรักษาโปรแกรมในอนาคต

 *    ดังนั้นการออกแบบโปรแกรมให้มีตัวแปรทุกตัวเป็น private และใช้ get-set method เพื่อเข้าถึงค่าของตัวแปรเหล่านั้นถือว่าเป็นการออกแบบที่ดี เพราะช่วยให้โปรแกรมมีความปลอดภัย และง่ายต่อการบำรุง
 *    รักษาในอนาคต
 */
